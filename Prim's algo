import java.util.*;



public class prims {

    static class Edge{
        int src;
        int dest;
        int wt;
        public Edge(int s,int d,int w){
            this.src=s;
            this.dest=d;
            this.wt=w;
        }
    }

    static class Pair implements Comparable<Pair>{
        int v;
        int cost;
        public Pair(int v,int cost){
            this.v=v;
            this.cost=cost;
        }

        @Override
        public int compareTo(Pair p2){
            return this.cost-p2.cost;
        }
    }
    public static void createGraph(ArrayList<Edge>graph[]){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<>();
        }

        //0 index
        graph[0].add(new Edge(0, 1, 10));
        graph[0].add(new Edge(0, 2, 15));
        graph[0].add(new Edge(0, 3, 30));

        //1 index
        graph[1].add(new Edge(1, 0, 10));
        graph[1].add(new Edge(1, 3, 40));

        //2index
        graph[2].add(new Edge(2, 0, 15));
        graph[2].add(new Edge(2, 3, 50));

        //3 index
        graph[3].add(new Edge(3, 1, 40));
        graph[3].add(new Edge(3, 2, 50));  
    }
    public static void prim_algo(ArrayList<Edge>[] graphs){
        boolean visit[]=new boolean[graphs.length];
        PriorityQueue<Pair> pq=new PriorityQueue<>();
        int finalcost=0;
        pq.add(new Pair(0,0));
        while (!pq.isEmpty()) {
            Pair curr=pq.remove();
            if (!visit[curr.v]) {
                visit[curr.v]=true;
                finalcost+=curr.cost;

               for(int i=0;i<graphs[curr.v].size();i++)
                {
                    
                    Edge e=graphs[curr.v].get(i);
                    pq.add(new Pair(e.dest,e.wt));
                }
            }
        }
        System.out.println("final cost = "+ finalcost);
    }
    public static void main(String[] args) {
        int v=4;
       ArrayList<Edge>graphs[]=new ArrayList[v];
        createGraph(graphs);

        prim_algo(graphs);
    }
}
