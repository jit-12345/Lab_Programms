import java.util.*;

public class bfs {
    public static class Edge {
        int src;
        int dest;
        int wt;// not mendatory here its for standarization

        public Edge(int s, int d, int w) {
            this.src = s;
            this.dest = d;
            this.wt = w;
        }

    }

    public static void createGraph(ArrayList<Edge>graph[]){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<>();
        }

        //0 index
        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        //1 index
        graph[1].add(new Edge(1, 3, 1));
        graph[1].add(new Edge(1, 0, 1));

        //2index
        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        //3 index
        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        //4 index
        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        //5 index
        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        //6 index
        graph[6].add(new Edge(6, 5, 1));
    }
   public static void traverseBFS(ArrayList<Edge>[]graph){
        Queue<Integer>q=new LinkedList<>();
        boolean visit[]=new boolean[graph.length];
        q.add(0);//0 is added as starting point;
        while (!q.isEmpty()) {
         int curr=q.remove();
         

         if(!visit[curr]){
            System.out.print(curr+" ");
            for(int i=0;i<graph[curr].size();i++){
                Edge e= graph[curr].get(i);
                q.add(e.dest);
            }
            visit[curr]=true;
         }
        }
    }
    public static void traverseDFS(ArrayList<Edge>[]graph,int curr,boolean visit[]){
        // if (!visit[curr]) {
            visit[curr]=true;
            System.out.print(curr+" ");
        //     return; 
        // }
        

        for(int i=0;i<graph[curr].size();i++){
            Edge e=graph[curr].get(i);
            if(!visit[e.dest])
            traverseDFS(graph, e.dest, visit);
        }
    }

    public static void main(String[] args) {
        int v = 7;
        ArrayList<Edge>[] graph = new ArrayList[v];
        createGraph(graph);
        //traverseBFS(graph);
        boolean vist[]=new boolean[v];
        traverseDFS(graph, 0,vist);
    }
}
